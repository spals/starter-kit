// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.14.0
// source: proto/health.proto

package proto

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type LiveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Full bool `protobuf:"varint,1,opt,name=full,proto3" json:"full,omitempty"`
}

func (x *LiveRequest) Reset() {
	*x = LiveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_health_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiveRequest) ProtoMessage() {}

func (x *LiveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_health_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiveRequest.ProtoReflect.Descriptor instead.
func (*LiveRequest) Descriptor() ([]byte, []int) {
	return file_proto_health_proto_rawDescGZIP(), []int{0}
}

func (x *LiveRequest) GetFull() bool {
	if x != nil {
		return x.Full
	}
	return false
}

type LiveResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsLive         bool            `protobuf:"varint,1,opt,name=is_live,json=isLive,proto3" json:"is_live,omitempty"`
	LivenessChecks *LivenessChecks `protobuf:"bytes,2,opt,name=liveness_checks,json=livenessChecks,proto3" json:"liveness_checks,omitempty"`
}

func (x *LiveResponse) Reset() {
	*x = LiveResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_health_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiveResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiveResponse) ProtoMessage() {}

func (x *LiveResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_health_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiveResponse.ProtoReflect.Descriptor instead.
func (*LiveResponse) Descriptor() ([]byte, []int) {
	return file_proto_health_proto_rawDescGZIP(), []int{1}
}

func (x *LiveResponse) GetIsLive() bool {
	if x != nil {
		return x.IsLive
	}
	return false
}

func (x *LiveResponse) GetLivenessChecks() *LivenessChecks {
	if x != nil {
		return x.LivenessChecks
	}
	return nil
}

// Configuration used to check liveness for GrpcServer.
// This configures the LivenessChecks found below (e.g.
// the max_go_routines informs the go_routines_count check)
type LivenessConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxGoRoutines int32 `protobuf:"varint,1,opt,name=max_go_routines,json=maxGoRoutines,proto3" json:"max_go_routines,omitempty"`
}

func (x *LivenessConfig) Reset() {
	*x = LivenessConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_health_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LivenessConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LivenessConfig) ProtoMessage() {}

func (x *LivenessConfig) ProtoReflect() protoreflect.Message {
	mi := &file_proto_health_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LivenessConfig.ProtoReflect.Descriptor instead.
func (*LivenessConfig) Descriptor() ([]byte, []int) {
	return file_proto_health_proto_rawDescGZIP(), []int{2}
}

func (x *LivenessConfig) GetMaxGoRoutines() int32 {
	if x != nil {
		return x.MaxGoRoutines
	}
	return 0
}

// Liveness checks for GrpcServer.
// These are configured by the LivenessConfig above (e.g.
// the max_go_routines informs the go_routines_count check)
type LivenessChecks struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GoRoutinesCount        bool   `protobuf:"varint,1,opt,name=go_routines_count,json=goRoutinesCount,proto3" json:"go_routines_count,omitempty"`
	GoRoutinesCountMessage string `protobuf:"bytes,2,opt,name=go_routines_count_message,json=goRoutinesCountMessage,proto3" json:"go_routines_count_message,omitempty"`
}

func (x *LivenessChecks) Reset() {
	*x = LivenessChecks{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_health_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LivenessChecks) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LivenessChecks) ProtoMessage() {}

func (x *LivenessChecks) ProtoReflect() protoreflect.Message {
	mi := &file_proto_health_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LivenessChecks.ProtoReflect.Descriptor instead.
func (*LivenessChecks) Descriptor() ([]byte, []int) {
	return file_proto_health_proto_rawDescGZIP(), []int{3}
}

func (x *LivenessChecks) GetGoRoutinesCount() bool {
	if x != nil {
		return x.GoRoutinesCount
	}
	return false
}

func (x *LivenessChecks) GetGoRoutinesCountMessage() string {
	if x != nil {
		return x.GoRoutinesCountMessage
	}
	return ""
}

type ReadyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Full bool `protobuf:"varint,1,opt,name=full,proto3" json:"full,omitempty"`
}

func (x *ReadyRequest) Reset() {
	*x = ReadyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_health_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadyRequest) ProtoMessage() {}

func (x *ReadyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_health_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadyRequest.ProtoReflect.Descriptor instead.
func (*ReadyRequest) Descriptor() ([]byte, []int) {
	return file_proto_health_proto_rawDescGZIP(), []int{4}
}

func (x *ReadyRequest) GetFull() bool {
	if x != nil {
		return x.Full
	}
	return false
}

type ReadyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsReady         bool             `protobuf:"varint,1,opt,name=is_ready,json=isReady,proto3" json:"is_ready,omitempty"`
	LivenessChecks  *LivenessChecks  `protobuf:"bytes,2,opt,name=liveness_checks,json=livenessChecks,proto3" json:"liveness_checks,omitempty"`
	ReadinessChecks *ReadinessChecks `protobuf:"bytes,3,opt,name=readiness_checks,json=readinessChecks,proto3" json:"readiness_checks,omitempty"`
}

func (x *ReadyResponse) Reset() {
	*x = ReadyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_health_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadyResponse) ProtoMessage() {}

func (x *ReadyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_health_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadyResponse.ProtoReflect.Descriptor instead.
func (*ReadyResponse) Descriptor() ([]byte, []int) {
	return file_proto_health_proto_rawDescGZIP(), []int{5}
}

func (x *ReadyResponse) GetIsReady() bool {
	if x != nil {
		return x.IsReady
	}
	return false
}

func (x *ReadyResponse) GetLivenessChecks() *LivenessChecks {
	if x != nil {
		return x.LivenessChecks
	}
	return nil
}

func (x *ReadyResponse) GetReadinessChecks() *ReadinessChecks {
	if x != nil {
		return x.ReadinessChecks
	}
	return nil
}

// Configuration used to check readiness for GrpcServer
// This configures the LivenessChecks found below
type ReadinessConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ReadinessConfig) Reset() {
	*x = ReadinessConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_health_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadinessConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadinessConfig) ProtoMessage() {}

func (x *ReadinessConfig) ProtoReflect() protoreflect.Message {
	mi := &file_proto_health_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadinessConfig.ProtoReflect.Descriptor instead.
func (*ReadinessConfig) Descriptor() ([]byte, []int) {
	return file_proto_health_proto_rawDescGZIP(), []int{6}
}

// Liveness checks for GrpcServer.
// These are configured by the LivenessConfig above
type ReadinessChecks struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ReadinessChecks) Reset() {
	*x = ReadinessChecks{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_health_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadinessChecks) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadinessChecks) ProtoMessage() {}

func (x *ReadinessChecks) ProtoReflect() protoreflect.Message {
	mi := &file_proto_health_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadinessChecks.ProtoReflect.Descriptor instead.
func (*ReadinessChecks) Descriptor() ([]byte, []int) {
	return file_proto_health_proto_rawDescGZIP(), []int{7}
}

var File_proto_health_proto protoreflect.FileDescriptor

var file_proto_health_proto_rawDesc = []byte{
	0x0a, 0x12, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x22, 0x21, 0x0a, 0x0b,
	0x4c, 0x69, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x66,
	0x75, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x66, 0x75, 0x6c, 0x6c, 0x22,
	0x68, 0x0a, 0x0c, 0x4c, 0x69, 0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x6c, 0x69, 0x76, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x69, 0x73, 0x4c, 0x69, 0x76, 0x65, 0x12, 0x3f, 0x0a, 0x0f, 0x6c, 0x69, 0x76, 0x65,
	0x6e, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x4c, 0x69, 0x76, 0x65, 0x6e,
	0x65, 0x73, 0x73, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x52, 0x0e, 0x6c, 0x69, 0x76, 0x65, 0x6e,
	0x65, 0x73, 0x73, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x22, 0x38, 0x0a, 0x0e, 0x4c, 0x69, 0x76,
	0x65, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x26, 0x0a, 0x0f, 0x6d,
	0x61, 0x78, 0x5f, 0x67, 0x6f, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x6d, 0x61, 0x78, 0x47, 0x6f, 0x52, 0x6f, 0x75, 0x74, 0x69,
	0x6e, 0x65, 0x73, 0x22, 0x77, 0x0a, 0x0e, 0x4c, 0x69, 0x76, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x67, 0x6f, 0x5f, 0x72, 0x6f, 0x75, 0x74,
	0x69, 0x6e, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0f, 0x67, 0x6f, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x39, 0x0a, 0x19, 0x67, 0x6f, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x73,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x67, 0x6f, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x73,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x22, 0x0a, 0x0c,
	0x52, 0x65, 0x61, 0x64, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x66, 0x75, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x66, 0x75, 0x6c, 0x6c,
	0x22, 0xaf, 0x01, 0x0a, 0x0d, 0x52, 0x65, 0x61, 0x64, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x52, 0x65, 0x61, 0x64, 0x79, 0x12, 0x3f, 0x0a,
	0x0f, 0x6c, 0x69, 0x76, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e,
	0x4c, 0x69, 0x76, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x52, 0x0e,
	0x6c, 0x69, 0x76, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x12, 0x42,
	0x0a, 0x10, 0x72, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x68, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x73, 0x52, 0x0f, 0x72, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x73, 0x22, 0x11, 0x0a, 0x0f, 0x52, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x11, 0x0a, 0x0f, 0x52, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x32, 0x7b, 0x0a, 0x06, 0x48, 0x65, 0x61, 0x6c,
	0x74, 0x68, 0x12, 0x36, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x76, 0x65, 0x12, 0x13, 0x2e,
	0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x4c, 0x69, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x14, 0x2e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x4c, 0x69, 0x76, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x39, 0x0a, 0x08, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x61, 0x64, 0x79, 0x12, 0x14, 0x2e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e,
	0x52, 0x65, 0x61, 0x64, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x68,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x59, 0x0a, 0x1f, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x70, 0x61,
	0x6c, 0x73, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x72, 0x6b, 0x69, 0x74, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x0b, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x27, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x70, 0x61, 0x6c, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65,
	0x72, 0x2d, 0x6b, 0x69, 0x74, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_health_proto_rawDescOnce sync.Once
	file_proto_health_proto_rawDescData = file_proto_health_proto_rawDesc
)

func file_proto_health_proto_rawDescGZIP() []byte {
	file_proto_health_proto_rawDescOnce.Do(func() {
		file_proto_health_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_health_proto_rawDescData)
	})
	return file_proto_health_proto_rawDescData
}

var file_proto_health_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_proto_health_proto_goTypes = []interface{}{
	(*LiveRequest)(nil),     // 0: health.LiveRequest
	(*LiveResponse)(nil),    // 1: health.LiveResponse
	(*LivenessConfig)(nil),  // 2: health.LivenessConfig
	(*LivenessChecks)(nil),  // 3: health.LivenessChecks
	(*ReadyRequest)(nil),    // 4: health.ReadyRequest
	(*ReadyResponse)(nil),   // 5: health.ReadyResponse
	(*ReadinessConfig)(nil), // 6: health.ReadinessConfig
	(*ReadinessChecks)(nil), // 7: health.ReadinessChecks
}
var file_proto_health_proto_depIdxs = []int32{
	3, // 0: health.LiveResponse.liveness_checks:type_name -> health.LivenessChecks
	3, // 1: health.ReadyResponse.liveness_checks:type_name -> health.LivenessChecks
	7, // 2: health.ReadyResponse.readiness_checks:type_name -> health.ReadinessChecks
	0, // 3: health.Health.GetLive:input_type -> health.LiveRequest
	4, // 4: health.Health.GetReady:input_type -> health.ReadyRequest
	1, // 5: health.Health.GetLive:output_type -> health.LiveResponse
	5, // 6: health.Health.GetReady:output_type -> health.ReadyResponse
	5, // [5:7] is the sub-list for method output_type
	3, // [3:5] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_proto_health_proto_init() }
func file_proto_health_proto_init() {
	if File_proto_health_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_health_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_health_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiveResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_health_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LivenessConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_health_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LivenessChecks); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_health_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_health_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_health_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadinessConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_health_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadinessChecks); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_health_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_health_proto_goTypes,
		DependencyIndexes: file_proto_health_proto_depIdxs,
		MessageInfos:      file_proto_health_proto_msgTypes,
	}.Build()
	File_proto_health_proto = out.File
	file_proto_health_proto_rawDesc = nil
	file_proto_health_proto_goTypes = nil
	file_proto_health_proto_depIdxs = nil
}
